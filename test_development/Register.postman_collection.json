{
	"info": {
		"_postman_id": "4cbaab7a-41e8-46df-8f08-968064d39ee2",
		"name": "Register",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30748919"
	},
	"item": [
		{
			"name": "Registro exitoso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"status\", \"OK\");\r",
							"pm.globals.set(\"message\", \"Successful registration\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar que el usuario intenta registrarse con información válida\r",
							"pm.test('El usuario intenta registrarse con información válida', function () {\r",
							"    // Configuración del cuerpo de la solicitud\r",
							"    let requestBody = {\r",
							"        'email': 'testuser1@example.com',\r",
							"        'user_name': 'testuser1',\r",
							"        'password': 'TestP@ss123'\r",
							"    };\r",
							"    \r",
							"    // Configuración del cuerpo de la solicitud en la petición actual\r",
							"    pm.request.body = {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(requestBody)\r",
							"    };\r",
							"\r",
							"    // Validaciones del cuerpo de la solicitud\r",
							"    pm.expect(requestBody).to.have.property('email');\r",
							"    pm.expect(requestBody.email).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('user_name');\r",
							"    pm.expect(requestBody.user_name).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('password');\r",
							"    pm.expect(requestBody.password).to.not.be.empty;\r",
							"\r",
							"    // Validación del formato del correo\r",
							"    pm.test('Validar Correo', function () {\r",
							"        pm.expect(requestBody.email).to.match(/\\S+@\\S+\\.\\S+/, 'El campo Correo no tiene el formato correcto');\r",
							"    });\r",
							"\r",
							"    // Validación del nombre de usuario\r",
							"    pm.test('Validar Nombre de Usuario', function () {\r",
							"        pm.expect(requestBody.user_name).to.match(/^[a-zA-Z0-9]+$/, 'El campo Nombre de Usuario debe ser alfanumérico');\r",
							"        pm.expect(requestBody.user_name).to.have.length.within(6, 56, 'El campo Nombre de Usuario debe tener entre 6 y 56 caracteres');\r",
							"    });\r",
							"\r",
							"    // Validación de la contraseña\r",
							"    pm.test('Validar Contraseña', function () {\r",
							"        pm.expect(requestBody.password).to.match(/^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$/, 'El campo Contraseña debe contener letras, números y al menos un caracter especial');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test para simular que el usuario envía una solicitud POST al endpoint de registro\r",
							"pm.test('El usuario envía una solicitud POST al endpoint de registro', function () {\r",
							"    pm.sendRequest({\r",
							"        url: 'https://31f26148-53be-474d-9a51-fa125946327a.mock.pstmn.io/register',\r",
							"        method: 'POST',\r",
							"        header: { 'Content-Type': 'application/json' },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                'email': 'test1@example.com',\r",
							"                'user_name': 'testuser1',\r",
							"                'password': 'TestP@ss123'\r",
							"            })\r",
							"        }\r",
							"    }, function (err, response) {\r",
							"        // Manejo de errores\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"        // Obtención de la respuesta JSON\r",
							"        let responseData = response ? response.json() : null;\r",
							"\r",
							"        // Validaciones de la respuesta\r",
							"        if (responseData) {\r",
							"            pm.expect(responseData.status).to.equal('OK', 'El estado debería ser \\'OK\\'');\r",
							"            pm.expect(responseData.message).to.equal('Successful registration', 'El mensaje debería ser \\'Successful registration\\'');\r",
							"\r",
							"            // Guardar el valor de 'status' en variables globales\r",
							"            pm.globals.set('status', responseData.status);\r",
							"        } else {\r",
							"            console.error('La respuesta no es válida');\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test para verificar que la respuesta indica un registro exitoso\r",
							"pm.test('La respuesta indica un registro exitoso', function () {\r",
							"    // Obtención de la respuesta JSON\r",
							"    let responseData = pm.response ? pm.response.json() : null;\r",
							"\r",
							"    // Validaciones de la respuesta\r",
							"    if (responseData) {\r",
							"        pm.expect(responseData.status).to.equal('OK', 'El estado debería ser \\'OK\\'');\r",
							"        pm.expect(responseData.message).to.equal('Successful registration', 'El mensaje debería ser \\'Successful registration\\'');\r",
							"    } else {\r",
							"        console.error('La respuesta no es válida');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test para verificar que el código de estado de la respuesta es 200\r",
							"pm.test(\"Registro exitoso. Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Tests longitud 'status' y 'message'\r",
							"pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"    const respuesta = pm.response.json();\r",
							"    pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"    pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"});\r",
							"\r",
							"pm.test(\"El tiempo de respuesta está dentro del rango aceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000, \"El tiempo de respuesta debe ser inferior a 2 segundos\");\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'status'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"    var statusGuardado = pm.globals.get(\"status\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var statusRespuesta = respuesta.status;\r",
							"    pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'message'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"    var messageGuardado = pm.globals.get(\"message\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var messageRespuesta = respuesta.message;\r",
							"    pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"test1@example.com\",\r\n  \"user_name\": \"testuser1\",\r\n  \"password\": \"TestP@ss123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_register}}/register",
					"host": [
						"{{url_mock_register}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": [
				{
					"name": "200 OK (Exitoso)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"test1@example.com\",\r\n  \"user_name\": \"testuser1\",\r\n  \"password\": \"TestP@ss123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_register}}/register",
							"host": [
								"{{url_mock_register}}"
							],
							"path": [
								"register"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"OK\",\n    \"message\": \"Successful registration\"\n}"
				}
			]
		},
		{
			"name": "Registro Servidor Error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"status\", \"ERROR\");\r",
							"pm.globals.set(\"message\", \"Internal Server Error. Please try again later.\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar respuesta contra el valor esperado en caso de error interno del servidor (500 Internal Server Error)\r",
							"pm.test(\"Error interno del servidor\", function() {\r",
							"    var respuesta = pm.response.json();\r",
							"    \r",
							"    if (respuesta.status === 'OK') {\r",
							"        // Registro exitoso\r",
							"        pm.expect(respuesta.message).to.equal('Successful registration', 'El mensaje debería ser \\'Successful registration\\'');\r",
							"    } else if (respuesta.status === 'ERROR') {\r",
							"        // Error interno del servidor\r",
							"        pm.expect(respuesta.message).to.equal('Internal Server Error. Please try again later.', 'El mensaje debería ser \\'Internal Server Error. Please try again later.\\'');\r",
							"    } else {\r",
							"        console.error('La respuesta no es válida');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test para verificar que el código de estado de la respuesta es 500\r",
							"pm.test(\"Error en el Servidor. Response status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"// Test longitud 'status' y 'message'\r",
							"pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"    const respuesta = pm.response.json();\r",
							"    pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"    pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'status'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"    var statusGuardado = pm.globals.get(\"status\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var statusRespuesta = respuesta.status;\r",
							"    pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'message'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"    var messageGuardado = pm.globals.get(\"message\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var messageRespuesta = respuesta.message;\r",
							"    pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test2@example.com\",\r\n    \"user_name\": \"testuser2\",\r\n    \"password\": \"TestP@ss123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_register}}/register",
					"host": [
						"{{url_mock_register}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": [
				{
					"name": "500 Internal Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test2@example.com\",\r\n    \"user_name\": \"testuser2\",\r\n    \"password\": \"TestP@ss123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_register}}/register",
							"host": [
								"{{url_mock_register}}"
							],
							"path": [
								"register"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"ERROR\",\n    \"message\": \"Internal Server Error. Please try again later.\"\n}"
				}
			]
		},
		{
			"name": "Registro contraseña inválida",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"status\", \"ERROR\");\r",
							"pm.globals.set(\"message\", \"Not secure password\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar que el usuario intenta registrarse con contraseña inválida\r",
							"pm.test('El usuario intenta registrarse con contraseña inválida', function () {\r",
							"    // Configuración del cuerpo de la solicitud\r",
							"    let requestBody = {\r",
							"        'email': 'test3@example.com',\r",
							"        'user_name': 'testuser3',\r",
							"        'password': 'badpass'\r",
							"    };\r",
							"    \r",
							"    // Configuración del cuerpo de la solicitud en la petición actual\r",
							"    pm.request.body = {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(requestBody)\r",
							"    };\r",
							"\r",
							"    // Validaciones del cuerpo de la solicitud\r",
							"    pm.expect(requestBody).to.have.property('email');\r",
							"    pm.expect(requestBody.email).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('user_name');\r",
							"    pm.expect(requestBody.user_name).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('password');\r",
							"    pm.expect(requestBody.password).to.not.be.empty;\r",
							"\r",
							"    // Validación del formato del correo\r",
							"    pm.test('Validar Correo', function () {\r",
							"        pm.expect(requestBody.email).to.match(/\\S+@\\S+\\.\\S+/, 'El campo Correo no tiene el formato correcto');\r",
							"    });\r",
							"\r",
							"    // Validación del nombre de usuario\r",
							"    pm.test('Validar Nombre de Usuario', function () {\r",
							"        pm.expect(requestBody.user_name).to.match(/^[a-zA-Z0-9]+$/, 'El campo Nombre de Usuario debe ser alfanumérico');\r",
							"        pm.expect(requestBody.user_name).to.have.length.within(6, 56, 'El campo Nombre de Usuario debe tener entre 6 y 56 caracteres');\r",
							"    });\r",
							"\r",
							"    // Validación de la contraseña inválida\r",
							"    pm.test('Validar Contraseña Inválida', function () {\r",
							"        pm.expect(requestBody.password).to.equal('badpass', 'La contraseña no debe ser igual a \"badpass\"');\r",
							"    });\r",
							"\r",
							"    // Enviar la solicitud POST al endpoint de registro\r",
							"    pm.sendRequest({\r",
							"        url: 'https://31f26148-53be-474d-9a51-fa125946327a.mock.pstmn.io/register',\r",
							"        method: 'POST',\r",
							"        header: { 'Content-Type': 'application/json' },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(requestBody)\r",
							"        }\r",
							"    }, function (err, response) {\r",
							"        // Manejo de errores\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"        \r",
							"        // Obtención de la respuesta JSON\r",
							"        let responseData = response ? response.json() : null;\r",
							"\r",
							"        // Validaciones de la respuesta\r",
							"        if (responseData) {\r",
							"            pm.expect(responseData.status).to.equal('ERROR', 'El estado debería ser \\'ERROR\\'');\r",
							"            pm.expect(responseData.message).to.equal('Not secure password', 'El mensaje debería ser \\'Not secure password\\'');\r",
							"        } else {\r",
							"            console.error('La respuesta no es válida');\r",
							"        }\r",
							"    });\r",
							"    \r",
							"    // Validar que el código de estado de la respuesta es 400 Bad Request\r",
							"    pm.test(\"Contraseña inválida. Response status code is 400\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Tests longitud 'status' y 'message'\r",
							"pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"    const respuesta = pm.response.json();\r",
							"    pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"    pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"});\r",
							"\r",
							"pm.test(\"El tiempo de respuesta está dentro del rango aceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000, \"El tiempo de respuesta debe ser inferior a 2 segundos\");\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'status'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"    var statusGuardado = pm.globals.get(\"status\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var statusRespuesta = respuesta.status;\r",
							"    pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'message'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"    var messageGuardado = pm.globals.get(\"message\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var messageRespuesta = respuesta.message;\r",
							"    pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test3@example.com\",\r\n    \"user_name\": \"testuser3\",\r\n    \"password\": \"badpass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_register}}/register",
					"host": [
						"{{url_mock_register}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": [
				{
					"name": "400 Bad Request (Contraseña inválida)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test3@example.com\",\r\n    \"user_name\": \"testuser3\",\r\n    \"password\": \"badpass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_register}}/register",
							"host": [
								"{{url_mock_register}}"
							],
							"path": [
								"register"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"ERROR\",\n    \"message\": \"Not secure password\"\n}"
				}
			]
		},
		{
			"name": "Registro username existente",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"status\", \"ERROR\");\r",
							"pm.globals.set(\"message\", \"Username already in use\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para el caso cuando el usuario intenta registrarse con un nombre de usuario ya en uso\r",
							"pm.test('El usuario intenta registrarse con un nombre de usuario ya en uso', function () {\r",
							"    // Configuración del cuerpo de la solicitud\r",
							"    let requestBody = {\r",
							"        'email': 'test4@example.com',\r",
							"        'user_name': 'myuser12', // Este username ya está en uso\r",
							"        'password': 'TestP@ss123'\r",
							"    };\r",
							"    \r",
							"    // Configuración del cuerpo de la solicitud en la petición actual\r",
							"    pm.request.body = {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(requestBody)\r",
							"    };\r",
							"\r",
							"    // Validaciones del cuerpo de la solicitud\r",
							"    pm.expect(requestBody).to.have.property('email');\r",
							"    pm.expect(requestBody.email).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('user_name');\r",
							"    pm.expect(requestBody.user_name).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('password');\r",
							"    pm.expect(requestBody.password).to.not.be.empty;\r",
							"\r",
							"    // Validación del formato del correo\r",
							"    pm.test('Validar Correo', function () {\r",
							"        pm.expect(requestBody.email).to.match(/\\S+@\\S+\\.\\S+/, 'El campo Correo no tiene el formato correcto');\r",
							"    });\r",
							"\r",
							"    // Validación del nombre de usuario\r",
							"    pm.test('Validar Nombre de Usuario', function () {\r",
							"        pm.expect(requestBody.user_name).to.match(/^[a-zA-Z0-9]+$/, 'El campo Nombre de Usuario debe ser alfanumérico');\r",
							"        pm.expect(requestBody.user_name).to.have.length.within(6, 56, 'El campo Nombre de Usuario debe tener entre 6 y 56 caracteres');\r",
							"    });\r",
							"\r",
							"    // Validación de la contraseña\r",
							"    pm.test('Validar Contraseña', function () {\r",
							"        pm.expect(requestBody.password).to.match(/^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$/, 'El campo Contraseña debe contener letras, números y al menos un caracter especial');\r",
							"    });\r",
							"\r",
							"    // Test para simular que el usuario envía una solicitud POST al endpoint de registro\r",
							"    pm.sendRequest({\r",
							"        url: 'https://31f26148-53be-474d-9a51-fa125946327a.mock.pstmn.io/register',\r",
							"        method: 'POST',\r",
							"        header: { 'Content-Type': 'application/json' },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(requestBody)\r",
							"        }\r",
							"    }, function (err, response) {\r",
							"        // Manejo de errores\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"        // Obtención de la respuesta JSON\r",
							"        let responseData = response ? response.json() : null;\r",
							"\r",
							"        // Validaciones de la respuesta\r",
							"        if (responseData) {\r",
							"            pm.expect(responseData.status).to.equal('ERROR', 'El estado debería ser \\'ERROR\\'');\r",
							"            pm.expect(responseData.message).to.equal('Username already in use', 'El mensaje debería ser \\'Username already in use\\'');\r",
							"\r",
							"            // Guardar el valor de 'status' y 'message' en variables globales\r",
							"            pm.globals.set('status', responseData.status);\r",
							"            pm.globals.set('message', responseData.message);\r",
							"        } else {\r",
							"            console.error('La respuesta no es válida');\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test para verificar que el código de estado de la respuesta es 409 Conflict\r",
							"pm.test(\"El username ya fue registrado anteriormente. Response status code is 409 Conflict\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"// Test longitud 'status' y 'message'\r",
							"pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"    const respuesta = pm.response.json();\r",
							"    pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"    pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"});\r",
							"\r",
							"pm.test(\"El tiempo de respuesta está dentro del rango aceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000, \"El tiempo de respuesta debe ser inferior a 2 segundos\");\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'status'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"    var statusGuardado = pm.globals.get(\"status\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var statusRespuesta = respuesta.status;\r",
							"    pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'message'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"    var messageGuardado = pm.globals.get(\"message\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var messageRespuesta = respuesta.message;\r",
							"    pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test4@example.com\",\r\n    \"user_name\": \"myuser12\",\r\n    \"password\": \"TestP@ss123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_register}}/register",
					"host": [
						"{{url_mock_register}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": [
				{
					"name": "409 Conflict (username ya existe)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test4@example.com\",\r\n    \"user_name\": \"myuser12\",\r\n    \"password\": \"TestP@ss123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_register}}/register",
							"host": [
								"{{url_mock_register}}"
							],
							"path": [
								"register"
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"ERROR\",\n    \"message\": \"Username already in use\"\n}"
				}
			]
		},
		{
			"name": "Registro email en uso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"status\", \"ERROR\");\r",
							"pm.globals.set(\"message\", \"Email already in use\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para el caso cuando el usuario intenta registrarse con un email en uso\r",
							"pm.test('El usuario intenta registrarse con un email en uso', function () {\r",
							"    // Configuración del cuerpo de la solicitud\r",
							"    let requestBody = {\r",
							"        'email': 'test1@example.com', //email ya registrado\r",
							"        'user_name': 'testuser6',\r",
							"        'password': 'TestP@ss123'\r",
							"    };\r",
							"    \r",
							"    // Configuración del cuerpo de la solicitud en la petición actual\r",
							"    pm.request.body = {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(requestBody)\r",
							"    };\r",
							"\r",
							"    // Validaciones del cuerpo de la solicitud\r",
							"    pm.expect(requestBody).to.have.property('email');\r",
							"    pm.expect(requestBody.email).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('user_name');\r",
							"    pm.expect(requestBody.user_name).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('password');\r",
							"    pm.expect(requestBody.password).to.not.be.empty;\r",
							"\r",
							"    // Validación del formato del correo\r",
							"    pm.test('Validar Correo', function () {\r",
							"        pm.expect(requestBody.email).to.match(/\\S+@\\S+\\.\\S+/, 'El campo Correo no tiene el formato correcto');\r",
							"    });\r",
							"\r",
							"    // Validación del nombre de usuario\r",
							"    pm.test('Validar Nombre de Usuario', function () {\r",
							"        pm.expect(requestBody.user_name).to.match(/^[a-zA-Z0-9]+$/, 'El campo Nombre de Usuario debe ser alfanumérico');\r",
							"        pm.expect(requestBody.user_name).to.have.length.within(6, 56, 'El campo Nombre de Usuario debe tener entre 6 y 56 caracteres');\r",
							"    });\r",
							"\r",
							"    // Validación de la contraseña\r",
							"    pm.test('Validar Contraseña', function () {\r",
							"        pm.expect(requestBody.password).to.match(/^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$/, 'El campo Contraseña debe contener letras, números y al menos un carácter especial');\r",
							"    });\r",
							"\r",
							"    // Test para simular que el usuario envía una solicitud POST al endpoint de registro\r",
							"    pm.sendRequest({\r",
							"        url: 'https://31f26148-53be-474d-9a51-fa125946327a.mock.pstmn.io/register',\r",
							"        method: 'POST',\r",
							"        header: { 'Content-Type': 'application/json' },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(requestBody)\r",
							"        }\r",
							"    }, function (err, response) {\r",
							"        // Manejo de errores\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"        // Obtención de la respuesta JSON\r",
							"        let responseData = response ? response.json() : null;\r",
							"\r",
							"        // Validaciones de la respuesta\r",
							"        if (responseData) {\r",
							"            pm.expect(responseData.status).to.equal('ERROR', 'El estado debería ser \\'ERROR\\'');\r",
							"            pm.expect(responseData.message).to.equal('Email already in use', 'El mensaje debería ser \\'Email already in use\\'');\r",
							"\r",
							"            // Guardar el valor de 'status' en una variable global\r",
							"            pm.globals.set('status', responseData.status);\r",
							"            pm.globals.set('message', responseData.message);\r",
							"        } else {\r",
							"            console.error('La respuesta no es válida');\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test para verificar que el código de estado de la respuesta es 400 Bad Request\r",
							"pm.test(\"El email ya está registrado. Response status code is 400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// Tests longitud 'status' y 'message'\r",
							"pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"    const respuesta = pm.response.json();\r",
							"    pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"    pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"});\r",
							"\r",
							"pm.test(\"El tiempo de respuesta está dentro del rango aceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000, \"El tiempo de respuesta debe ser inferior a 2 segundos\");\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'status'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"    var statusGuardado = pm.globals.get(\"status\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var statusRespuesta = respuesta.status;\r",
							"    pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'message'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"    var messageGuardado = pm.globals.get(\"message\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var messageRespuesta = respuesta.message;\r",
							"    pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"test1@example.com\",\r\n  \"user_name\": \"testuser6\",\r\n  \"password\": \"TestP@ss123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_register}}/register",
					"host": [
						"{{url_mock_register}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": [
				{
					"name": "400 Bad Request (Email en uso)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"test1@example.com\",\r\n  \"user_name\": \"testuser6\",\r\n  \"password\": \"TestP@ss123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_register}}/register",
							"host": [
								"{{url_mock_register}}"
							],
							"path": [
								"register"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"ERROR\",\n    \"message\": \"Email already in use\"\n}"
				}
			]
		}
	]
}