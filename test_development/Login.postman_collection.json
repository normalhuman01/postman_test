{
	"info": {
		"_postman_id": "97556fb3-1dd7-4180-90b6-4771bb03d1f4",
		"name": "Login",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30748919"
	},
	"item": [
		{
			"name": "Inicio Sesión exitoso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"message\", \"Authentication successful\");\r",
							"pm.globals.set(\"status\", \"OK\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar que el usuario intenta iniciar sesión con información válida\r",
							"pm.test('El usuario intenta iniciar sesión con información válida', function () {\r",
							"    // Configuración del cuerpo de la solicitud\r",
							"    let requestBody = {\r",
							"        'user_name': 'testuser1',\r",
							"        'password': 'TestP@ss123'\r",
							"    };\r",
							"\r",
							"    // Configuración del cuerpo de la solicitud en la petición actual\r",
							"    pm.request.body = {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(requestBody)\r",
							"    };\r",
							"\r",
							"    // Validaciones del cuerpo de la solicitud\r",
							"    pm.expect(requestBody).to.have.property('user_name');\r",
							"    pm.expect(requestBody.user_name).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('password');\r",
							"    pm.expect(requestBody.password).to.not.be.empty;\r",
							"\r",
							"\r",
							"    // Validación del nombre de usuario\r",
							"    pm.test('Validar Nombre de Usuario', function () {\r",
							"        pm.expect(requestBody.user_name).to.match(/^[a-zA-Z0-9]+$/, 'El campo Nombre de Usuario debe ser alfanumérico');\r",
							"        pm.expect(requestBody.user_name).to.have.length.within(6, 56, 'El campo Nombre de Usuario debe tener entre 6 y 56 caracteres');\r",
							"    });\r",
							"\r",
							"    // Validación de la contraseña\r",
							"    pm.test('Validar Contraseña', function () {\r",
							"        pm.expect(requestBody.password).to.match(/^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$/, 'El campo Contraseña debe contener letras, números y al menos un caracter especial');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test para simular que el usuario envía una solicitud POST al endpoint de inicio de sesión\r",
							"pm.sendRequest({\r",
							"    url: 'https://31f26148-53be-474d-9a51-fa125946327a.mock.pstmn.io/login', // Asegúrate de que esta URL sea correcta\r",
							"    method: 'POST',\r",
							"    header: { 'Content-Type': 'application/json' },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            'user_name': 'testuser1',\r",
							"            'password': 'TestP@ss123'\r",
							"        })\r",
							"    }\r",
							"}, function (err, response) {\r",
							"    // Manejo de errores\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    // Test para verificar que el código de estado de la respuesta es 200\r",
							"    pm.test(\"Inicio Sesion exitoso. Response status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    // Validar el tiempo de respuesta\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000, 'El tiempo de respuesta debe ser inferior a 2 segundos');\r",
							"\r",
							"    // Obtención de la respuesta JSON\r",
							"    let responseData = response ? response.json() : null;\r",
							"\r",
							"    // Validaciones de la respuesta\r",
							"    if (responseData) {\r",
							"        pm.expect(responseData.status).to.equal('OK', 'El campo \"status\" debería ser \\'OK\\'');\r",
							"        pm.expect(responseData.message).to.equal('Authentication successful', 'El campo \"message\" debería ser \\'Authentication successful\\'');\r",
							"    } else {\r",
							"        console.error('La respuesta no es válida');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Tests longitud 'status' y 'message'\r",
							"pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"    const respuesta = pm.response.json();\r",
							"    pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"    pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'status'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"    var statusGuardado = pm.globals.get(\"status\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var statusRespuesta = respuesta.status;\r",
							"    pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"});\r",
							"\r",
							"// Validar respuesta contra el valor guardado en 'message'\r",
							"pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"    var messageGuardado = pm.globals.get(\"message\");\r",
							"    var respuesta = pm.response.json();\r",
							"    var messageRespuesta = respuesta.message;\r",
							"    pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_name\": \"testuser1\",\r\n    \"password\": \"TestP@ss123\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_login}}/login",
					"host": [
						"{{url_mock_login}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": [
				{
					"name": "200 OK (Exitoso)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_name\": \"testuser1\",\r\n    \"password\": \"TestP@ss123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_login}}/login",
							"host": [
								"{{url_mock_login}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Authentication successful\",\n    \"status\": \"OK\"\n}"
				}
			]
		},
		{
			"name": "Inicio Sesión no coincide contraseña",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"message\", \"Invalid credentials\");\r",
							"pm.globals.set(\"status\", \"BADCREDENTIALS\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar que el usuario intenta iniciar sesión con información válida\r",
							"pm.test('El usuario intenta iniciar sesión con contraseña no registrada', function () {\r",
							"    // Configuración del cuerpo de la solicitud\r",
							"    let requestBody = {\r",
							"        'user_name': 'testuser1',\r",
							"        'password': 'badpass@123' // Contraseña incorrecta\r",
							"    };\r",
							"\r",
							"// Agregar la lógica de validación de credenciales con la base de datos\r",
							"const usernameEnBaseDeDatos = 'testuser1'; // Nombre de usuario registrado en la base de datos\r",
							"const passwordEnBaseDeDatos = 'TestP@ss123'; // Contraseña registrada en la base de datos\r",
							"\r",
							"if (requestBody.user_name !== usernameEnBaseDeDatos || requestBody.password !== passwordEnBaseDeDatos) {\r",
							"    // En este caso, las credenciales no coinciden con el usuario registrado\r",
							"    pm.expect(true, 'Las credenciales proporcionadas no coinciden con el usuario registrado').to.be.true;\r",
							"}\r",
							"\r",
							"    // Configuración del cuerpo de la solicitud en la petición actual\r",
							"    pm.request.body = {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(requestBody)\r",
							"    };\r",
							"\r",
							"    // Validaciones del cuerpo de la solicitud\r",
							"    pm.expect(requestBody).to.have.property('user_name');\r",
							"    pm.expect(requestBody.user_name).to.not.be.empty;\r",
							"    pm.expect(requestBody).to.have.property('password');\r",
							"    pm.expect(requestBody.password).to.not.be.empty;\r",
							"\r",
							"        // Validación del nombre de usuario\r",
							"    pm.test('Validar Nombre de Usuario', function () {\r",
							"        pm.expect(requestBody.user_name).to.match(/^[a-zA-Z0-9]+$/, 'El campo Nombre de Usuario debe ser alfanumérico');\r",
							"        pm.expect(requestBody.user_name).to.have.length.within(6, 56, 'El campo Nombre de Usuario debe tener entre 6 y 56 caracteres');\r",
							"    });\r",
							"\r",
							"    // Validación de la contraseña\r",
							"    pm.test('Validar Contraseña', function () {\r",
							"        pm.expect(requestBody.password).to.match(/^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$/, 'El campo Contraseña debe contener letras, números y al menos un caracter especial');\r",
							"    });\r",
							"\r",
							"    // Test para simular que el usuario envía una solicitud POST al endpoint de inicio de sesión\r",
							"    pm.sendRequest({\r",
							"        url: 'https://31f26148-53be-474d-9a51-fa125946327a.mock.pstmn.io/login', // Asegúrate de que esta URL sea correcta\r",
							"        method: 'POST',\r",
							"        header: { 'Content-Type': 'application/json' },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(requestBody)\r",
							"        }\r",
							"    }, function (err, response) {\r",
							"        // Manejo de errores\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Test para verificar que el código de estado de la respuesta es 401 Unauthorized (contraseña incorrecta)\r",
							"        pm.test(\"Inicio de Sesión fallido. Response status code is 401\", function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"\r",
							"        // Obtención de la respuesta JSON\r",
							"        let responseData = response ? response.json() : null;\r",
							"\r",
							"        // Validaciones de la respuesta\r",
							"        if (responseData) {\r",
							"            pm.expect(responseData.status).to.equal('BADCREDENTIALS', 'El campo \"status\" debería ser \\'BADCREDENTIALS\\'');\r",
							"            pm.expect(responseData.message).to.equal('Invalid credentials', 'El campo \"message\" debería ser \\'Invalid credentials\\'');\r",
							"        } else {\r",
							"            console.error('La respuesta no es válida');\r",
							"        }\r",
							"    });\r",
							"\r",
							"    // Tests longitud 'status' y 'message'\r",
							"    pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"        const respuesta = pm.response.json();\r",
							"        pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"        pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"    });\r",
							"\r",
							"    // Validar el tiempo de respuesta\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000, 'El tiempo de respuesta debe ser inferior a 2 segundos');\r",
							"    // Validar respuesta contra el valor guardado en 'status'\r",
							"    pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"        var statusGuardado = pm.globals.get(\"status\");\r",
							"        var respuesta = pm.response.json();\r",
							"        var statusRespuesta = respuesta.status;\r",
							"        pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"    });\r",
							"\r",
							"    // Validar respuesta contra el valor guardado en 'message'\r",
							"    pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"        var messageGuardado = pm.globals.get(\"message\");\r",
							"        var respuesta = pm.response.json();\r",
							"        var messageRespuesta = respuesta.message;\r",
							"        pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_name\": \"testuser1\",\r\n    \"password\": \"badpass@123\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_login}}/login",
					"host": [
						"{{url_mock_login}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": [
				{
					"name": "401 Unauthorized (No coincide contraseña)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_name\": \"testuser1\",\r\n    \"password\": \"badpass@123\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_login}}/login",
							"host": [
								"{{url_mock_login}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Invalid credentials\",\n    \"status\": \"BADCREDENTIALS\"\n}"
				}
			]
		},
		{
			"name": "Inicio Sesión usuario no existe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"message\", \"User not found\");\r",
							"pm.globals.set(\"status\", \"NOTFOUND\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar que el usuario intenta iniciar sesión con un usuario que no existe\r",
							"pm.test('El usuario intenta iniciar sesión con un usuario que no existe', function () {\r",
							"    // Configuración del cuerpo de la solicitud\r",
							"    let requestBody = {\r",
							"        'user_name': 'notuser2',\r",
							"        'password': 'TestP@ss123'\r",
							"    };\r",
							"\r",
							"    // Configuración del cuerpo de la solicitud en la petición actual\r",
							"    pm.request.body = {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(requestBody)\r",
							"    };\r",
							"\r",
							"    // Validación del nombre de usuario\r",
							"    pm.test('Validar Nombre de Usuario', function () {\r",
							"        pm.expect(requestBody.user_name).to.match(/^[a-zA-Z0-9]+$/, 'El campo Nombre de Usuario debe ser alfanumérico');\r",
							"        pm.expect(requestBody.user_name).to.have.length.within(6, 56, 'El campo Nombre de Usuario debe tener entre 6 y 56 caracteres');\r",
							"    });\r",
							"\r",
							"    // Validación de la contraseña\r",
							"    pm.test('Validar Contraseña', function () {\r",
							"        pm.expect(requestBody.password).to.match(/^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$/, 'El campo Contraseña debe contener letras, números y al menos un caracter especial');\r",
							"    });\r",
							"\r",
							"    // Test para simular que el usuario envía una solicitud POST al endpoint de inicio de sesión\r",
							"    pm.sendRequest({\r",
							"        url: 'https://31f26148-53be-474d-9a51-fa125946327a.mock.pstmn.io/login', // Asegúrate de que esta URL sea correcta\r",
							"        method: 'POST',\r",
							"        header: { 'Content-Type': 'application/json' },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(requestBody)\r",
							"        }\r",
							"    }, function (err, response) {\r",
							"        // Manejo de errores\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Test para verificar que el código de estado de la respuesta es 404 Not Found (usuario no existe)\r",
							"        pm.test(\"Inicio de Sesión fallido. Response status code is 404\", function () {\r",
							"            pm.response.to.have.status(404);\r",
							"        });\r",
							"\r",
							"        // Obtención de la respuesta JSON\r",
							"        let responseData = response ? response.json() : null;\r",
							"\r",
							"        // Validaciones de la respuesta\r",
							"        if (responseData) {\r",
							"            pm.expect(responseData.status).to.equal('NOTFOUND', 'El campo \"status\" debería ser \\'NOTFOUND\\'');\r",
							"            pm.expect(responseData.message).to.equal('User not found', 'El campo \"message\" debería ser \\'User not found\\'');\r",
							"        } else {\r",
							"            console.error('La respuesta no es válida');\r",
							"        }\r",
							"\r",
							"        // Validar el tiempo de respuesta\r",
							"        pm.expect(pm.response.responseTime).to.be.below(2000, 'El tiempo de respuesta debe ser inferior a 2 segundos');\r",
							"    });\r",
							"\r",
							"    // Tests longitud 'status' y 'message'\r",
							"    pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"        const respuesta = pm.response.json();\r",
							"        pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"        pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"    });\r",
							"\r",
							"        // Validar respuesta contra el valor guardado en 'status'\r",
							"    pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"        var statusGuardado = pm.globals.get(\"status\");\r",
							"        var respuesta = pm.response.json();\r",
							"        var statusRespuesta = respuesta.status;\r",
							"        pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"    });\r",
							"\r",
							"    // Validar respuesta contra el valor guardado en 'message'\r",
							"    pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"        var messageGuardado = pm.globals.get(\"message\");\r",
							"        var respuesta = pm.response.json();\r",
							"        var messageRespuesta = respuesta.message;\r",
							"        pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_name\": \"notuser2\",\r\n    \"password\": \"TestP@ss123\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_login}}/login",
					"host": [
						"{{url_mock_login}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": [
				{
					"name": "404 Not Found (Usuario no existe)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_name\": \"notuser2\",\r\n    \"password\": \"TestP@ss123\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_login}}/login",
							"host": [
								"{{url_mock_login}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"User not found\",\n    \"status\": \"NOTFOUND\"\n}"
				}
			]
		},
		{
			"name": "Inicio Sesión usuario no existe Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Guardar los valores de 'status' y 'message' en variables globales\r",
							"pm.globals.set(\"message\", \"User not found\");\r",
							"pm.globals.set(\"status\", \"NOTFOUND\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar que el usuario intenta iniciar sesión con credenciales inválidas\r",
							"pm.test('El usuario intenta iniciar sesión con credenciales inválidas', function () {\r",
							"    // Configuración del cuerpo de la solicitud\r",
							"    let requestBody = {\r",
							"        'user_name': 'notuser2', // Usuario no existente\r",
							"        'password': 'badpass@123' // Contraseña inválida\r",
							"    };\r",
							"\r",
							"    // Configuración del cuerpo de la solicitud en la petición actual\r",
							"    pm.request.body = {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(requestBody)\r",
							"    };\r",
							"\r",
							"    // Validación del nombre de usuario\r",
							"    pm.test('Validar Nombre de Usuario', function () {\r",
							"        pm.expect(requestBody.user_name).to.match(/^[a-zA-Z0-9]+$/, 'El campo Nombre de Usuario debe ser alfanumérico');\r",
							"        pm.expect(requestBody.user_name).to.have.length.within(6, 56, 'El campo Nombre de Usuario debe tener entre 6 y 56 caracteres');\r",
							"    });\r",
							"\r",
							"    // Validación de la contraseña\r",
							"    pm.test('Validar Contraseña', function () {\r",
							"        pm.expect(requestBody.password).to.match(/^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).*$/, 'El campo Contraseña debe contener letras, números y al menos un caracter especial');\r",
							"    });\r",
							"\r",
							"    // Test para simular que el usuario envía una solicitud POST al endpoint de inicio de sesión\r",
							"    pm.sendRequest({\r",
							"        url: 'https://31f26148-53be-474d-9a51-fa125946327a.mock.pstmn.io/login', // Asegúrate de que esta URL sea correcta\r",
							"        method: 'POST',\r",
							"        header: { 'Content-Type': 'application/json' },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(requestBody)\r",
							"        }\r",
							"    }, function (err, response) {\r",
							"        // Manejo de errores\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Test para verificar que el código de estado de la respuesta es 404 Not Found (usuario no existe)\r",
							"        pm.test(\"Inicio de Sesión fallido. Response status code is 404\", function () {\r",
							"            pm.response.to.have.status(404);\r",
							"        });\r",
							"\r",
							"        // Validar el tiempo de respuesta\r",
							"        pm.expect(pm.response.responseTime).to.be.below(2000, 'El tiempo de respuesta debe ser inferior a 2 segundos');\r",
							"\r",
							"        // Obtención de la respuesta JSON\r",
							"        let responseData = response ? response.json() : null;\r",
							"\r",
							"        // Validaciones de la respuesta\r",
							"        if (responseData) {\r",
							"            pm.expect(responseData.status).to.equal('NOTFOUND', 'El campo \"status\" debería ser \\'NOTFOUND\\'');\r",
							"            pm.expect(responseData.message).to.equal('User not found', 'El campo \"message\" debería ser \\'User not found\\'');\r",
							"        } else {\r",
							"            console.error('La respuesta no es válida');\r",
							"        }\r",
							"    });\r",
							"\r",
							"    // Tests longitud 'status' y 'message'\r",
							"    pm.test(\"La longitud de 'status' y 'message' debe ser mayor que cero\", function () {\r",
							"        const respuesta = pm.response.json();\r",
							"        pm.expect(respuesta.status.length).to.be.greaterThan(0, \"El campo 'status' no debe estar vacío\");\r",
							"        pm.expect(respuesta.message.length).to.be.greaterThan(0, \"El campo 'message' no debe estar vacío\");\r",
							"    });\r",
							"\r",
							"        // Validar respuesta contra el valor guardado en 'status'\r",
							"    pm.test(\"Validar respuesta contra el valor guardado en 'status'\", function() {\r",
							"        var statusGuardado = pm.globals.get(\"status\");\r",
							"        var respuesta = pm.response.json();\r",
							"        var statusRespuesta = respuesta.status;\r",
							"        pm.expect(statusRespuesta).to.equal(statusGuardado);\r",
							"    });\r",
							"\r",
							"    // Validar respuesta contra el valor guardado en 'message'\r",
							"    pm.test(\"Validar respuesta contra el valor guardado en 'message'\", function() {\r",
							"        var messageGuardado = pm.globals.get(\"message\");\r",
							"        var respuesta = pm.response.json();\r",
							"        var messageRespuesta = respuesta.message;\r",
							"        pm.expect(messageRespuesta).to.equal(messageGuardado);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_name\": \"notuser2\",\r\n    \"password\": \"badpass@123\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_mock_login}}/login",
					"host": [
						"{{url_mock_login}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": [
				{
					"name": "404 Not Found (Usuario y contraseña inválidos)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_name\": \"notuser2\",\r\n    \"password\": \"badpass@123\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_mock_login}}/login",
							"host": [
								"{{url_mock_login}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"User not found\",\n    \"status\": \"NOTFOUND\"\n}"
				}
			]
		}
	]
}